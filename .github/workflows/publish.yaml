name: Publish

on:
  push:
    # run only against tags
    tags:
      - "*"

jobs:
  publish-goreleaser:
    name: Publish - Go Releaser
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v3
        with:
          go-version: 1.24.3

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: 2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.NITRIC_BOT_TOKEN }}

  publish-node:
    name: Publish - NodeJS Client NPM
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client/node
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.NITRIC_BOT_TOKEN }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: "node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('package-lock.json') }}

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
          always-auth: true

      - name: Git Identity
        run: |
          git config --global user.name 'nitric-bot[bot]'
          git config --global user.email 'maintainers@nitric.io'

      - name: Set Version
        # Tag will already be created by release flow
        run: npm version --no-git-tag-version ${{ github.ref_name }}

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check if prerelease
        id: prerelease
        run: |
          if [[ "${{ github.ref_name }}" =~ ^.*(-rc|-beta|-alpha).*$ ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish latest to NPM
        if: steps.prerelease.outputs.is_prerelease == 'false'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish latest RC to NPM
        if: steps.prerelease.outputs.is_prerelease == 'true'
        run: npm publish --access public --tag rc-latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-python:
    name: Publish - Python Client PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./client/python
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed to retrieve most recent tag
      
      - name: Set up Python '3.11'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Create virtual environment and install uv
        run: |
          python3 -m venv .venv
          .venv/bin/python -m pip install --upgrade pip
          .venv/bin/python -m pip install uv
      
      - name: Set Version
        run: |
          # Set version in pyproject.toml for setuptools-scm
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      
      - name: Generate protobuf files
        run: make generate-proto
      
      - name: Build package
        run: make build
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./client/python/dist/
